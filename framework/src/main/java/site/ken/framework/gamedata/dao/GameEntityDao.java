package site.ken.framework.gamedata.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import site.ken.framework.gamedata.dao.entity.GameEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "rom".
*/
public class GameEntityDao extends AbstractDao<GameEntity, Long> {

    public static final String TABLENAME = "rom";

    /**
     * Properties of entity GameEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Enname = new Property(2, String.class, "enname", false, "enname");
        public final static Property Chname = new Property(3, String.class, "chname", false, "chname");
        public final static Property Pinyin = new Property(4, String.class, "pinyin", false, "pinyin");
        public final static Property Visiable = new Property(5, int.class, "visiable", false, "visiable");
        public final static Property Type = new Property(6, String.class, "type", false, "type");
        public final static Property Path = new Property(7, String.class, "path", false, "path");
        public final static Property Checksum = new Property(8, String.class, "checksum", false, "checksum");
        public final static Property _id = new Property(9, long.class, "_id", false, "_id");
        public final static Property Zipfile_id = new Property(10, long.class, "zipfile_id", false, "zipfile_id");
        public final static Property InserTime = new Property(11, long.class, "inserTime", false, "inserTime");
        public final static Property LastGameTime = new Property(12, long.class, "lastGameTime", false, "lastGameTime");
        public final static Property RunCount = new Property(13, int.class, "runCount", false, "runCount");
        public final static Property CleanNameCache = new Property(14, String.class, "cleanNameCache", false, "cleanNameCache");
        public final static Property SortNameCache = new Property(15, String.class, "sortNameCache", false, "sortNameCache");
        public final static Property Hash = new Property(16, String.class, "hash", false, "hash");
    }


    public GameEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GameEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"rom\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"enname\" TEXT," + // 2: enname
                "\"chname\" TEXT," + // 3: chname
                "\"pinyin\" TEXT," + // 4: pinyin
                "\"visiable\" INTEGER NOT NULL ," + // 5: visiable
                "\"type\" TEXT," + // 6: type
                "\"path\" TEXT," + // 7: path
                "\"checksum\" TEXT," + // 8: checksum
                "\"_id\" INTEGER NOT NULL ," + // 9: _id
                "\"zipfile_id\" INTEGER NOT NULL ," + // 10: zipfile_id
                "\"inserTime\" INTEGER NOT NULL ," + // 11: inserTime
                "\"lastGameTime\" INTEGER NOT NULL ," + // 12: lastGameTime
                "\"runCount\" INTEGER NOT NULL ," + // 13: runCount
                "\"cleanNameCache\" TEXT," + // 14: cleanNameCache
                "\"sortNameCache\" TEXT," + // 15: sortNameCache
                "\"hash\" TEXT);"); // 16: hash
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"rom\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String enname = entity.getEnname();
        if (enname != null) {
            stmt.bindString(3, enname);
        }
 
        String chname = entity.getChname();
        if (chname != null) {
            stmt.bindString(4, chname);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(5, pinyin);
        }
        stmt.bindLong(6, entity.getVisiable());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        String checksum = entity.getChecksum();
        if (checksum != null) {
            stmt.bindString(9, checksum);
        }
        stmt.bindLong(10, entity.get_id());
        stmt.bindLong(11, entity.getZipfile_id());
        stmt.bindLong(12, entity.getInserTime());
        stmt.bindLong(13, entity.getLastGameTime());
        stmt.bindLong(14, entity.getRunCount());
 
        String cleanNameCache = entity.getCleanNameCache();
        if (cleanNameCache != null) {
            stmt.bindString(15, cleanNameCache);
        }
 
        String sortNameCache = entity.getSortNameCache();
        if (sortNameCache != null) {
            stmt.bindString(16, sortNameCache);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(17, hash);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String enname = entity.getEnname();
        if (enname != null) {
            stmt.bindString(3, enname);
        }
 
        String chname = entity.getChname();
        if (chname != null) {
            stmt.bindString(4, chname);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(5, pinyin);
        }
        stmt.bindLong(6, entity.getVisiable());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        String checksum = entity.getChecksum();
        if (checksum != null) {
            stmt.bindString(9, checksum);
        }
        stmt.bindLong(10, entity.get_id());
        stmt.bindLong(11, entity.getZipfile_id());
        stmt.bindLong(12, entity.getInserTime());
        stmt.bindLong(13, entity.getLastGameTime());
        stmt.bindLong(14, entity.getRunCount());
 
        String cleanNameCache = entity.getCleanNameCache();
        if (cleanNameCache != null) {
            stmt.bindString(15, cleanNameCache);
        }
 
        String sortNameCache = entity.getSortNameCache();
        if (sortNameCache != null) {
            stmt.bindString(16, sortNameCache);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(17, hash);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameEntity readEntity(Cursor cursor, int offset) {
        GameEntity entity = new GameEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // enname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinyin
            cursor.getInt(offset + 5), // visiable
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // path
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // checksum
            cursor.getLong(offset + 9), // _id
            cursor.getLong(offset + 10), // zipfile_id
            cursor.getLong(offset + 11), // inserTime
            cursor.getLong(offset + 12), // lastGameTime
            cursor.getInt(offset + 13), // runCount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cleanNameCache
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sortNameCache
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // hash
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEnname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinyin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVisiable(cursor.getInt(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChecksum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.set_id(cursor.getLong(offset + 9));
        entity.setZipfile_id(cursor.getLong(offset + 10));
        entity.setInserTime(cursor.getLong(offset + 11));
        entity.setLastGameTime(cursor.getLong(offset + 12));
        entity.setRunCount(cursor.getInt(offset + 13));
        entity.setCleanNameCache(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSortNameCache(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHash(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
